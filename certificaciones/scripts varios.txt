hola, tengo una base de datos llamada certificaciones_DB en postgres 16, dentro del esquema esta cursos, dentro de cursos estan las siguientes tablas:

auditoria columnas:

id_auditoria: integer, llave primaria.
usuario: varchar (255).
accion: varchar (20).
tabla_afectada: varchar (50).
fecha: timestamp.
dato_previo: text.
dato_modificado: text.
certificaciones columnas:

id_idcertificacion: integer, llave primaria.
id_usuario: integer, llave foránea curso.usuarios id.
curso_id: integer, llave foránea curso.curso id_curso.
valor_unico: varchard, llave única.
completado: boolean.
nota: integer.
fecha_inscripcion: timestamp.
cursos columnas:

id_curso: integer, llave primaria.
promotor: varchar (255).
modalidad: varchar (255).
nombre_curso: varchar (255).
descripcion: text.
duracion: integer.
periodo: date.
tipo_evaluacion: boolean.
tipo_curso: varchar (255).
autorizacion: varchar (255).
limite_inscripciones: integer.
estado: boolean.
dias_clase: unknown.
horario_inicio: time.
horario_fin time.
curso_modulos columnas:

id_modulo: integer, llave primaria.
id_curso: integer, llave foránea curso.curso id_curso.
nombre_modulo: varchar (255).
descripcion_modulo: text.
fecha_inicio: date.
fecha_fin: date.
roles columnas:

id_rol: integer, llave primaria.
nombre_rol: varchar (100).
usuarios columnas:

id: integer, llave primaria.
nombre: varchar (100).
apellido: varchar (100).
correo: varchar (100), llave única.
password: text.
cedula: varchar (100), llave única.
id_rol: integer, llave foránea curso.roles id_rol.
token: varchar(255).
confirmado: boolean.


asi esta formada la base de datos.

y esto es un esquema de como estan organizados mis archivos:

certificaciones/
├── config/
│   └── model.php
├── controllers/
│   ├── asignar_nota.php
│   ├── autenticacion.php
│   ├── curso_acciones.php
│   ├── curso_controlador.php
|   ├── usuarios_controlador.php
|   └── actualizar_estado.php
├── models/
│   ├── curso.php
│   ├── datos_usuario.php
│   └── obtener_cursos.php
├── public/
│   ├── assets/
│   │   └── estilo.css
│   ├── cursos.php
│   ├── gestion_cursos.php
│   ├── index.php
│   ├── perfil.php
│   ├── detallles_curso.php
|   ├── register.php
│   └── editar_cursos.php
└── views/
    ├── curso_formulario.html
    ├── curso.php
    ├── historial.php
    ├── footer.php
    └── header.php


-- Crear la base de datos
CREATE DATABASE certificaciones_DB;

-- Conectar a la base de datos
\c certificaciones_DB;

-- Crear el esquema
CREATE SCHEMA cursos;

-- Crear las tablas dentro del esquema cursos
CREATE TABLE cursos.cursos (
    id_curso SERIAL PRIMARY KEY,
    promotor VARCHAR(255),
    modalidad VARCHAR(255),
    nombre_curso VARCHAR(255),
    descripcion TEXT,
    duracion INTERVAL,
    periodo DATE,
    tipo_evaluacion BOOLEAN,
    tipo_curso VARCHAR(255),
    autorizacion VARCHAR(255),
    limite_inscripciones INTEGER,
    estado BOOLEAN
);

CREATE TABLE cursos.roles (
    id_rol SERIAL PRIMARY KEY,
    nombre_rol VARCHAR(255)
);

CREATE TABLE cursos.usuarios (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255),
    apellido VARCHAR(255),
    correo VARCHAR(255) UNIQUE,
    password TEXT,
    cedula VARCHAR(255) UNIQUE,
    id_rol INTEGER REFERENCES cursos.roles(id_rol),
    token VARCHAR(255),
    confirmado BOOLEAN
);

CREATE TABLE cursos.certificaciones (
    id_idcertificacion SERIAL PRIMARY KEY,
    id_usuario INTEGER REFERENCES cursos.usuarios(id),
    curso_id INTEGER REFERENCES cursos.cursos(id_curso),
    valor_unico VARCHAR(255) UNIQUE,
    completado BOOLEAN,
    nota INTEGER,
    fecha_inscripcion TIMESTAMP
);

CREATE TABLE cursos.auditoria (
    id_auditoria SERIAL PRIMARY KEY,
    usuario VARCHAR(255) NOT NULL,
    accion VARCHAR(20) NOT NULL,
    tabla_afectada VARCHAR(50) NOT NULL,
    fecha TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    dato_previo TEXT,
    dato_modificado TEXT
);

-- Crear la función de auditoría dentro del esquema cursos
CREATE OR REPLACE FUNCTION cursos.cursos_audit() RETURNS TRIGGER AS $$
DECLARE
    accion_texto VARCHAR(10);
    usuario_sistema INTEGER;
BEGIN
    -- Obtener el ID del usuario del sistema desde una variable de configuración
    SELECT current_setting('myapp.current_user_id', true)::INTEGER INTO usuario_sistema;

    IF TG_OP = 'DELETE' THEN
        accion_texto := 'DELETE';
    ELSIF TG_OP = 'UPDATE' THEN
        accion_texto := 'UPDATE';
    ELSE
        accion_texto := 'INSERT';
    END IF;

    INSERT INTO cursos.auditoria (usuario, accion, tabla_afectada, fecha, dato_previo, dato_modificado)
    VALUES (usuario_sistema, accion_texto, TG_TABLE_NAME, now(), OLD::text, NEW::text);

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Crear los triggers dentro del esquema cursos
CREATE TRIGGER certificaciones_trigger
AFTER INSERT OR UPDATE OR DELETE ON cursos.certificaciones
FOR EACH ROW EXECUTE FUNCTION cursos.cursos_audit();

CREATE TRIGGER cursos_trigger
AFTER INSERT OR UPDATE OR DELETE ON cursos.cursos
FOR EACH ROW EXECUTE FUNCTION cursos.cursos_audit();

CREATE TRIGGER roles_trigger
AFTER INSERT OR UPDATE OR DELETE ON cursos.roles
FOR EACH ROW EXECUTE FUNCTION cursos.cursos_audit();

CREATE TRIGGER usuarios_trigger
AFTER INSERT OR UPDATE OR DELETE ON cursos.usuarios
FOR EACH ROW EXECUTE FUNCTION cursos.cursos_audit();

Tu estructura actual es bastante buena, pero hay algunas mejoras que podrías considerar para hacerla más clara y modular:

config/
model.php: Perfecto para la configuración de la base de datos y funciones comunes.
controllers/
asignar_nota.php: Está bien aquí, pero podrías renombrarlo a algo más general como NotasController.php para seguir una convención de nombres.
autenticacion.php: Podrías renombrarlo a AuthController.php para mantener consistencia.
curso_acciones.php: Podrías fusionarlo con curso_controlador.php si las acciones son específicas de los cursos.
curso_controlador.php: Renombrarlo a CursosController.php para seguir la convención.
usuarios_controlador.php: Renombrarlo a UsuariosController.php.
actualizar_estado.php: Podría ser parte de CursosController.php o UsuariosController.php dependiendo de qué estado estás actualizando.
models/
curso.php: Perfecto aquí.
datos_usuario.php: Podrías renombrarlo a Usuario.php para seguir la convención de nombres.
obtener_cursos.php: Podrías fusionarlo con curso.php si es específico de los cursos.
public/
assets/: Perfecto aquí.
estilo.css: Perfecto aquí.
cursos.html: Podrías moverlo a la carpeta views si es una vista.
gestion_cursos.php: Podrías moverlo a la carpeta views si es una vista.
index.php: Perfecto aquí.
perfil.php: Podrías moverlo a la carpeta views si es una vista.
detallles_curso.php: Podrías moverlo a la carpeta views si es una vista.
usuario.php: Podrías moverlo a la carpeta views si es una vista.
editar_cursos.php: Podrías moverlo a la carpeta views si es una vista.
views/
curso_formulario.html: Perfecto aquí.
curso.php: Perfecto aquí.
footer.php: Perfecto aquí.
header.php: Perfecto aquí.
Sugerencias adicionales:
Separación de lógica y presentación: Asegúrate de que la lógica de negocio esté en los controladores y modelos, y la presentación en las vistas.
Convenciones de nombres: Usar nombres consistentes y en inglés puede ayudar a mantener la claridad y la coherencia.
¿Te gustaría ayuda con algún aspecto específico de la reorganización o tienes alguna otra pregunta?

-- Configuraciones iniciales
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

-- Crear esquema
CREATE SCHEMA cursos;
ALTER SCHEMA cursos OWNER TO postgres;

-- Crear extensión
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';

-- Crear función de auditoría
CREATE FUNCTION cursos.cursos_audit() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    accion_texto VARCHAR(10);
    usuario_sistema INTEGER;
BEGIN
    SELECT current_setting('myapp.current_user_id', true)::INTEGER INTO usuario_sistema;

    IF TG_OP = 'DELETE' THEN
        accion_texto := 'DELETE';
    ELSIF TG_OP = 'UPDATE' THEN
        accion_texto := 'UPDATE';
    ELSE
        accion_texto := 'INSERT';
    END IF;

    INSERT INTO cursos.auditoria (usuario, accion, tabla_afectada, fecha, dato_previo, dato_modificado)
    VALUES (usuario_sistema, accion_texto, TG_TABLE_NAME, now(), OLD::text, NEW::text);

    RETURN NULL;
END;
$$;
ALTER FUNCTION cursos.cursos_audit() OWNER TO postgres;

-- Crear función de auditoría pública
CREATE FUNCTION public.cursos_audit() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    accion_texto VARCHAR(10);
    usuario_sistema INTEGER;
BEGIN
    BEGIN
        SELECT current_setting('myapp.current_user_id', true)::INTEGER INTO usuario_sistema;
    EXCEPTION
        WHEN others THEN
            usuario_sistema := -1;
    END;

    IF TG_OP = 'DELETE' THEN
        accion_texto := 'DELETE';
    ELSIF TG_OP = 'UPDATE' THEN
        accion_texto := 'UPDATE';
    ELSE
        accion_texto := 'INSERT';
    END IF;

    INSERT INTO cursos.auditoria (usuario, accion, tabla_afectada, fecha, dato_previo, dato_modificado)
    VALUES (usuario_sistema, accion_texto, TG_TABLE_NAME, now(), OLD::text, NEW::text);

    RETURN NULL;
END;
$$;
ALTER FUNCTION public.cursos_audit() OWNER TO postgres;

-- Crear tablas y secuencias
CREATE TABLE cursos.auditoria (
    id_auditoria integer NOT NULL,
    usuario character varying(255),
    accion character varying(20) NOT NULL,
    tabla_afectada character varying(50) NOT NULL,
    fecha timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    dato_previo text,
    dato_modificado text
);
ALTER TABLE cursos.auditoria OWNER TO postgres;

CREATE SEQUENCE cursos.auditoria_id_auditoria_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE cursos.auditoria_id_auditoria_seq OWNER TO postgres;
ALTER SEQUENCE cursos.auditoria_id_auditoria_seq OWNED BY cursos.auditoria.id_auditoria;

CREATE TABLE cursos.certificaciones (
    id_certificacion integer NOT NULL,
    id_usuario integer,
    curso_id integer,
    valor_unico character varying,
    completado boolean DEFAULT false,
    nota integer,
    fecha_inscripcion timestamp without time zone,
    pago boolean
);
ALTER TABLE cursos.certificaciones OWNER TO postgres;

CREATE SEQUENCE cursos.certificaciones_id_certificacion_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE cursos.certificaciones_id_certificacion_seq OWNER TO postgres;
ALTER SEQUENCE cursos.certificaciones_id_certificacion_seq OWNED BY cursos.certificaciones.id_certificacion;

CREATE TABLE cursos.cursos (
    id_curso integer NOT NULL,
    promotor character varying(255),
    nombre_curso character varying(255),
    descripcion text,
    tiempo_asignado integer,
    inicio_mes date,
    tipo_curso character varying(255),
    autorizacion character varying(255),
    limite_inscripciones integer,
    estado boolean,
    dias_clase text[],
    horario_inicio time without time zone,
    horario_fin time without time zone,
    nivel_curso character varying(255),
    costo numeric(10,2),
    conocimientos_previos text,
    requerimientos_implemento text,
    desempeno_al_concluir text
);
ALTER TABLE cursos.cursos OWNER TO postgres;

CREATE SEQUENCE cursos.cursos_id_curso_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE cursos.cursos_id_curso_seq OWNER TO postgres;
ALTER SEQUENCE cursos.cursos_id_curso_seq OWNED BY cursos.cursos.id_curso;

CREATE TABLE cursos.modulos (
    id_modulo integer NOT NULL,
    id_curso integer,
    nombre_modulo character varying(255),
    contenido text,
    numero integer,
    actividad character varying(255),
    instrumento character varying(255)
);
ALTER TABLE cursos.modulos OWNER TO postgres;

CREATE SEQUENCE cursos.cursos_modulos_id_modulo_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE cursos.cursos_modulos_id_modulo_seq OWNER TO postgres;
ALTER SEQUENCE cursos.cursos_modulos_id_modulo_seq OWNED BY cursos.modulos.id_modulo;

CREATE TABLE cursos.roles (
    id_rol integer NOT NULL,
    nombre_rol character varying(100)
);
ALTER TABLE cursos.roles OWNER TO postgres;

CREATE SEQUENCE cursos.roles_id_rol_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE cursos.roles_id_rol_seq OWNER TO postgres;
ALTER SEQUENCE cursos.roles_id_rol_seq OWNED BY cursos.roles.id_rol;

CREATE TABLE cursos.usuario_documentos (
    documento_id integer NOT NULL,
    usuario_id integer NOT NULL,
    documento_path character varying(255) NOT NULL,
    documento_type character varying(50) NOT NULL
);
ALTER TABLE cursos.usuario_documentos OWNER TO postgres;

CREATE SEQUENCE cursos.usuario_documentos_documento_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE cursos.usuario_documentos_documento_id_seq OWNER TO postgres;
ALTER SEQUENCE cursos.usuario_documentos_documento_id_seq OWNED BY cursos.usuario_documentos.documento_id;

CREATE TABLE cursos.usuarios (
    id integer NOT NULL,
    nombre character varying(100),
    apellido character varying(100),
    correo character varying(100),
    password text,
    cedula character varying(100),
    id_rol integer,
    token character varying(255),
    confirmado boolean,
    firma_digital character varying(255)
);
ALTER TABLE cursos.usuarios OWNER TO postgres;

CREATE SEQUENCE cursos.usuarios_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE cursos.usuarios_id_seq OWNER TO postgres;
ALTER SEQUENCE cursos.usuarios_id_seq OWNED BY cursos.usuarios.id;

-- Configurar valores predeterminados para las secuencias
ALTER TABLE ONLY cursos.auditoria ALTER COLUMN id_auditoria SET DEFAULT nextval('cursos.auditoria_id_auditoria_seq'::regclass);
ALTER TABLE ONLY cursos.certificaciones ALTER COLUMN id_certificacion SET DEFAULT nextval('cursos.certificaciones_id_certificacion_seq'::regclass);
ALTER TABLE ONLY cursos.cursos ALTER COLUMN id_curso SET DEFAULT nextval('cursos.cursos_id_curso_seq'::regclass);
ALTER TABLE ONLY cursos.modulos ALTER COLUMN id_modulo SET DEFAULT nextval('cursos.cursos_modulos_id_modulo_seq'::regclass);
ALTER TABLE ONLY cursos.roles ALTER COLUMN id_rol SET DEFAULT nextval('cursos.roles_id_rol_seq'::regclass);
ALTER TABLE ONLY cursos.usuario_documentos ALTER COLUMN documento_id SET DEFAULT nextval('cursos.usuario_documentos_documento_id_seq'::regclass);
ALTER TABLE ONLY cursos.usuarios ALTER COLUMN id SET DEFAULT nextval('cursos.usuarios_id_seq'::regclass);

-- Definir llaves primarias y únicas
ALTER TABLE ONLY cursos.certificaciones ADD CONSTRAINT certificaciones_pkey PRIMARY KEY (id_certificacion);
ALTER TABLE ONLY cursos.certificaciones ADD CONSTRAINT certificaciones_valor_unico_key UNIQUE (valor_unico);
ALTER TABLE ONLY cursos.modulos ADD CONSTRAINT cursos_modulos_pkey PRIMARY KEY (id_modulo);
ALTER TABLE ONLY cursos.cursos ADD CONSTRAINT cursos_pkey PRIMARY KEY (id_curso);
ALTER TABLE ONLY cursos.roles ADD CONSTRAINT roles_pkey PRIMARY KEY (id_rol);
ALTER TABLE ONLY cursos.usuario_documentos ADD CONSTRAINT usuario_documentos_pkey PRIMARY KEY (documento_id);
ALTER TABLE ONLY cursos.usuarios ADD CONSTRAINT usuarios_cedula_key UNIQUE (cedula);
ALTER TABLE ONLY cursos.usuarios ADD CONSTRAINT usuarios_correo_key UNIQUE (correo);
ALTER TABLE ONLY cursos.usuarios ADD CONSTRAINT usuarios_pkey PRIMARY KEY (id);

-- Crear triggers para auditoría
CREATE TRIGGER certificaciones_trigger 
AFTER INSERT OR DELETE OR UPDATE ON cursos.certificaciones 
FOR EACH ROW EXECUTE FUNCTION cursos.cursos_audit();

CREATE TRIGGER cursos_trigger 
AFTER INSERT OR DELETE OR UPDATE ON cursos.cursos 
FOR EACH ROW EXECUTE FUNCTION cursos.cursos_audit();

CREATE TRIGGER roles_trigger 
AFTER INSERT OR DELETE OR UPDATE ON cursos.roles 
FOR EACH ROW EXECUTE FUNCTION cursos.cursos_audit();

CREATE TRIGGER usuarios_trigger 
AFTER INSERT OR DELETE OR UPDATE ON cursos.usuarios 
FOR EACH ROW EXECUTE FUNCTION cursos.cursos_audit();

-- Definir llaves foráneas
ALTER TABLE ONLY cursos.certificaciones
    ADD CONSTRAINT certificaciones_id_curso_fkey FOREIGN KEY (curso_id) REFERENCES cursos.cursos(id_curso);

ALTER TABLE ONLY cursos.certificaciones
    ADD CONSTRAINT certificaciones_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES cursos.usuarios(id);

ALTER TABLE ONLY cursos.modulos
    ADD CONSTRAINT cursos_modulos_id_curso_fkey FOREIGN KEY (id_curso) REFERENCES cursos.cursos(id_curso);

ALTER TABLE ONLY cursos.usuario_documentos
    ADD CONSTRAINT usuario_documentos_usuario_id_fkey FOREIGN KEY (usuario_id) REFERENCES cursos.usuarios(id);

ALTER TABLE ONLY cursos.usuarios
    ADD CONSTRAINT usuarios_id_rol_fkey FOREIGN KEY (id_rol) REFERENCES cursos.roles(id_rol);