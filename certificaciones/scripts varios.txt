hola, tengo una base de datos llamada certificaciones_DB en postgres 16, dentro del esquema esta cursos, dentro de cursos estan las siguientes tablas:

auditoria columnas:

id_auditoria: integer, llave primaria.
usuario: varchar (255).
accion: varchar (20).
tabla_afectada: varchar (50).
fecha: timestamp.
dato_previo: text.
dato_modificado: text.
certificaciones columnas:

id_idcertificacion: integer, llave primaria.
id_usuario: integer, llave foránea curso.usuarios id.
curso_id: integer, llave foránea curso.curso id_curso.
valor_unico: varchard, llave única.
completado: boolean.
nota: integer.
fecha_inscripcion: timestamp.
cursos columnas:

id_curso: integer, llave primaria.
promotor: varchar (255).
modalidad: varchar (255).
nombre_curso: varchar (255).
descripcion: text.
duracion: integer.
periodo: date.
tipo_evaluacion: boolean.
tipo_curso: varchar (255).
autorizacion: varchar (255).
limite_inscripciones: integer.
estado: boolean.
dias_clase: unknown.
horario_inicio: time.
horario_fin time.
curso_modulos columnas:

id_modulo: integer, llave primaria.
id_curso: integer, llave foránea curso.curso id_curso.
nombre_modulo: varchar (255).
descripcion_modulo: text.
fecha_inicio: date.
fecha_fin: date.
roles columnas:

id_rol: integer, llave primaria.
nombre_rol: varchar (100).
usuarios columnas:

id: integer, llave primaria.
nombre: varchar (100).
apellido: varchar (100).
correo: varchar (100), llave única.
password: text.
cedula: varchar (100), llave única.
id_rol: integer, llave foránea curso.roles id_rol.
token: varchar(255).
confirmado: boolean.


asi esta formada la base de datos.

y esto es un esquema de como estan organizados mis archivos:

certificaciones/
├── config/
│   └── model.php
├── controllers/
│   ├── asignar_nota.php
│   ├── autenticacion.php
│   ├── curso_acciones.php
│   ├── curso_controlador.php
|   ├── usuarios_controlador.php
|   └── actualizar_estado.php
├── models/
│   ├── curso.php
│   ├── datos_usuario.php
│   └── obtener_cursos.php
├── public/
│   ├── assets/
│   │   └── estilo.css
│   ├── cursos.php
│   ├── gestion_cursos.php
│   ├── index.php
│   ├── perfil.php
│   ├── detallles_curso.php
|   ├── register.php
│   └── editar_cursos.php
└── views/
    ├── curso_formulario.html
    ├── curso.php
    ├── historial.php
    ├── footer.php
    └── header.php


-- Crear la base de datos
CREATE DATABASE certificaciones_DB;

-- Conectar a la base de datos
\c certificaciones_DB;

-- Crear el esquema
CREATE SCHEMA cursos;

-- Crear las tablas dentro del esquema cursos
CREATE TABLE cursos.cursos (
    id_curso SERIAL PRIMARY KEY,
    promotor VARCHAR(255),
    modalidad VARCHAR(255),
    nombre_curso VARCHAR(255),
    descripcion TEXT,
    duracion INTERVAL,
    periodo DATE,
    tipo_evaluacion BOOLEAN,
    tipo_curso VARCHAR(255),
    autorizacion VARCHAR(255),
    limite_inscripciones INTEGER,
    estado BOOLEAN
);

CREATE TABLE cursos.roles (
    id_rol SERIAL PRIMARY KEY,
    nombre_rol VARCHAR(255)
);

CREATE TABLE cursos.usuarios (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255),
    apellido VARCHAR(255),
    correo VARCHAR(255) UNIQUE,
    password TEXT,
    cedula VARCHAR(255) UNIQUE,
    id_rol INTEGER REFERENCES cursos.roles(id_rol),
    token VARCHAR(255),
    confirmado BOOLEAN
);

CREATE TABLE cursos.certificaciones (
    id_idcertificacion SERIAL PRIMARY KEY,
    id_usuario INTEGER REFERENCES cursos.usuarios(id),
    curso_id INTEGER REFERENCES cursos.cursos(id_curso),
    valor_unico VARCHAR(255) UNIQUE,
    completado BOOLEAN,
    nota INTEGER,
    fecha_inscripcion TIMESTAMP
);

CREATE TABLE cursos.auditoria (
    id_auditoria SERIAL PRIMARY KEY,
    usuario VARCHAR(255) NOT NULL,
    accion VARCHAR(20) NOT NULL,
    tabla_afectada VARCHAR(50) NOT NULL,
    fecha TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    dato_previo TEXT,
    dato_modificado TEXT
);

-- Crear la función de auditoría dentro del esquema cursos
CREATE OR REPLACE FUNCTION cursos.cursos_audit() RETURNS TRIGGER AS $$
DECLARE
    accion_texto VARCHAR(10);
    usuario_sistema INTEGER;
BEGIN
    -- Obtener el ID del usuario del sistema desde una variable de configuración
    SELECT current_setting('myapp.current_user_id', true)::INTEGER INTO usuario_sistema;

    IF TG_OP = 'DELETE' THEN
        accion_texto := 'DELETE';
    ELSIF TG_OP = 'UPDATE' THEN
        accion_texto := 'UPDATE';
    ELSE
        accion_texto := 'INSERT';
    END IF;

    INSERT INTO cursos.auditoria (usuario, accion, tabla_afectada, fecha, dato_previo, dato_modificado)
    VALUES (usuario_sistema, accion_texto, TG_TABLE_NAME, now(), OLD::text, NEW::text);

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Crear los triggers dentro del esquema cursos
CREATE TRIGGER certificaciones_trigger
AFTER INSERT OR UPDATE OR DELETE ON cursos.certificaciones
FOR EACH ROW EXECUTE FUNCTION cursos.cursos_audit();

CREATE TRIGGER cursos_trigger
AFTER INSERT OR UPDATE OR DELETE ON cursos.cursos
FOR EACH ROW EXECUTE FUNCTION cursos.cursos_audit();

CREATE TRIGGER roles_trigger
AFTER INSERT OR UPDATE OR DELETE ON cursos.roles
FOR EACH ROW EXECUTE FUNCTION cursos.cursos_audit();

CREATE TRIGGER usuarios_trigger
AFTER INSERT OR UPDATE OR DELETE ON cursos.usuarios
FOR EACH ROW EXECUTE FUNCTION cursos.cursos_audit();

Tu estructura actual es bastante buena, pero hay algunas mejoras que podrías considerar para hacerla más clara y modular:

config/
model.php: Perfecto para la configuración de la base de datos y funciones comunes.
controllers/
asignar_nota.php: Está bien aquí, pero podrías renombrarlo a algo más general como NotasController.php para seguir una convención de nombres.
autenticacion.php: Podrías renombrarlo a AuthController.php para mantener consistencia.
curso_acciones.php: Podrías fusionarlo con curso_controlador.php si las acciones son específicas de los cursos.
curso_controlador.php: Renombrarlo a CursosController.php para seguir la convención.
usuarios_controlador.php: Renombrarlo a UsuariosController.php.
actualizar_estado.php: Podría ser parte de CursosController.php o UsuariosController.php dependiendo de qué estado estás actualizando.
models/
curso.php: Perfecto aquí.
datos_usuario.php: Podrías renombrarlo a Usuario.php para seguir la convención de nombres.
obtener_cursos.php: Podrías fusionarlo con curso.php si es específico de los cursos.
public/
assets/: Perfecto aquí.
estilo.css: Perfecto aquí.
cursos.html: Podrías moverlo a la carpeta views si es una vista.
gestion_cursos.php: Podrías moverlo a la carpeta views si es una vista.
index.php: Perfecto aquí.
perfil.php: Podrías moverlo a la carpeta views si es una vista.
detallles_curso.php: Podrías moverlo a la carpeta views si es una vista.
usuario.php: Podrías moverlo a la carpeta views si es una vista.
editar_cursos.php: Podrías moverlo a la carpeta views si es una vista.
views/
curso_formulario.html: Perfecto aquí.
curso.php: Perfecto aquí.
footer.php: Perfecto aquí.
header.php: Perfecto aquí.
Sugerencias adicionales:
Separación de lógica y presentación: Asegúrate de que la lógica de negocio esté en los controladores y modelos, y la presentación en las vistas.
Convenciones de nombres: Usar nombres consistentes y en inglés puede ayudar a mantener la claridad y la coherencia.
¿Te gustaría ayuda con algún aspecto específico de la reorganización o tienes alguna otra pregunta?

-- Configuración inicial
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

-- Crear esquema
CREATE SCHEMA cursos AUTHORIZATION CURRENT_USER;

-- Crear extensión para UUID
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';

-- Crear tablas y secuencias
CREATE TABLE cursos.auditoria (
    id_auditoria serial PRIMARY KEY,
    usuario character varying(255),
    accion character varying(20) NOT NULL,
    tabla_afectada character varying(50) NOT NULL,
    fecha timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    dato_previo text,
    dato_modificado text
);

CREATE TABLE cursos.certificaciones (
    id_certificacion serial PRIMARY KEY,
    id_usuario integer,
    curso_id integer,
    valor_unico character varying UNIQUE,
    completado boolean DEFAULT false,
    nota integer,
    fecha_inscripcion timestamp without time zone,
    pago boolean
);

CREATE TABLE cursos.cursos (
    id_curso serial PRIMARY KEY,
    promotor character varying(255),
    nombre_curso character varying(255),
    descripcion text,
    tiempo_asignado integer,
    inicio_mes date,
    tipo_curso character varying(255),
    autorizacion character varying(255),
    limite_inscripciones integer,
    estado boolean,
    dias_clase text[],
    horario_inicio time without time zone,
    horario_fin time without time zone,
    nivel_curso character varying(255),
    costo numeric(10,2),
    conocimientos_previos text,
    requerimientos_implemento text,
    desempeno_al_concluir text
);

CREATE TABLE cursos.modulos (
    id_modulo serial PRIMARY KEY,
    id_curso integer,
    nombre_modulo character varying(255),
    contenido text,
    numero integer,
    actividad character varying(255),
    instrumento character varying(255)
);

CREATE TABLE cursos.roles (
    id_rol serial PRIMARY KEY,
    nombre_rol character varying(100)
);

CREATE TABLE cursos.usuario_documentos (
    documento_id serial PRIMARY KEY,
    usuario_id integer NOT NULL,
    documento_path character varying(255) NOT NULL,
    documento_type character varying(50) NOT NULL
);

CREATE TABLE cursos.usuarios (
    id serial PRIMARY KEY,
    nombre character varying(100),
    apellido character varying(100),
    correo character varying(100) UNIQUE,
    password text,
    cedula character varying(100) UNIQUE,
    id_rol integer,
    token character varying(255),
    confirmado boolean,
    firma_digital character varying(255)
);

-- Crear relaciones
ALTER TABLE cursos.certificaciones
    ADD CONSTRAINT certificaciones_id_curso_fkey FOREIGN KEY (curso_id) REFERENCES cursos.cursos(id_curso);
ALTER TABLE cursos.certificaciones
    ADD CONSTRAINT certificaciones_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES cursos.usuarios(id);
ALTER TABLE cursos.modulos
    ADD CONSTRAINT cursos_modulos_id_curso_fkey FOREIGN KEY (id_curso) REFERENCES cursos.cursos(id_curso);
ALTER TABLE cursos.usuario_documentos
    ADD CONSTRAINT usuario_documentos_usuario_id_fkey FOREIGN KEY (usuario_id) REFERENCES cursos.usuarios(id);
ALTER TABLE cursos.usuarios
    ADD CONSTRAINT usuarios_id_rol_fkey FOREIGN KEY (id_rol) REFERENCES cursos.roles(id_rol);

-- Función de auditoría
CREATE OR REPLACE FUNCTION cursos.cursos_audit() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    accion_texto VARCHAR(10);
    usuario_sistema INTEGER;
BEGIN
    -- Obtener el ID del usuario del sistema desde una variable de configuración
    BEGIN
        SELECT current_setting('myapp.current_user_id', true)::INTEGER INTO usuario_sistema;
    EXCEPTION
        WHEN others THEN
            -- Si no se puede obtener el ID del usuario, usar un valor predeterminado
            usuario_sistema := -1; -- Puedes usar -1 o cualquier otro valor que indique "sin usuario"
    END;

    IF TG_OP = 'DELETE' THEN
        accion_texto := 'DELETE';
        INSERT INTO cursos.auditoria (usuario, accion, tabla_afectada, fecha, dato_previo, dato_modificado)
        VALUES (usuario_sistema, accion_texto, TG_TABLE_NAME, now(), OLD::text, NULL);
        RETURN OLD;
    ELSIF TG_OP = 'UPDATE' THEN
        accion_texto := 'UPDATE';
        INSERT INTO cursos.auditoria (usuario, accion, tabla_afectada, fecha, dato_previo, dato_modificado)
        VALUES (usuario_sistema, accion_texto, TG_TABLE_NAME, now(), OLD::text, NEW::text);
        RETURN NEW;
    ELSIF TG_OP = 'INSERT' THEN
        accion_texto := 'INSERT';
        INSERT INTO cursos.auditoria (usuario, accion, tabla_afectada, fecha, dato_previo, dato_modificado)
        VALUES (usuario_sistema, accion_texto, TG_TABLE_NAME, now(), NULL, NEW::text);
        RETURN NEW;
    END IF;

    RETURN NULL;
END;
$$;

-- Crear triggers
CREATE TRIGGER certificaciones_trigger AFTER INSERT OR DELETE OR UPDATE ON cursos.certificaciones FOR EACH ROW EXECUTE PROCEDURE cursos.cursos_audit();
CREATE TRIGGER cursos_trigger AFTER INSERT OR DELETE OR UPDATE ON cursos.cursos FOR EACH ROW EXECUTE PROCEDURE cursos.cursos_audit();
CREATE TRIGGER roles_trigger AFTER INSERT OR DELETE OR UPDATE ON cursos.roles FOR EACH ROW EXECUTE PROCEDURE cursos.cursos_audit();
CREATE TRIGGER usuarios_trigger AFTER INSERT OR DELETE OR UPDATE ON cursos.usuarios FOR EACH ROW EXECUTE PROCEDURE cursos.cursos_audit();

-- Otorgar permisos sobre el esquema
GRANT ALL ON SCHEMA cursos TO uptaivir_certificacion2;

-- Otorgar permisos sobre las tablas
GRANT ALL ON ALL TABLES IN SCHEMA cursos TO uptaivir_certificacion2;

-- Otorgar permisos sobre las secuencias
GRANT ALL ON ALL SEQUENCES IN SCHEMA cursos TO uptaivir_certificacion2;

-- Otorgar permisos sobre las funciones
GRANT ALL ON ALL FUNCTIONS IN SCHEMA cursos TO uptaivir_certificacion2;

-- Otorgar permisos sobre los triggers
DO $$
DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT event_object_table FROM information_schema.triggers WHERE trigger_schema = 'cursos') LOOP
        EXECUTE 'GRANT ALL ON TABLE cursos.' || r.event_object_table || ' TO uptaivir_certificacion2';
    END LOOP;
END $$;

ALTER TABLE cursos.certificaciones
ADD COLUMN tomo integer,
ADD COLUMN folio integer;

-- Seleccionar el esquema 'cursos'
SET search_path TO cursos;

-- Eliminar la restricción de clave foránea existente
ALTER TABLE cursos.modulos DROP CONSTRAINT IF EXISTS cursos_modulos_id_curso_fkey;

-- Agregar la restricción de clave foránea con ON DELETE CASCADE
ALTER TABLE cursos.modulos
    ADD CONSTRAINT cursos_modulos_id_curso_fkey FOREIGN KEY (id_curso) REFERENCES cursos(id_curso) ON DELETE CASCADE;

-- Eliminar las columnas firma_digital y fecha_finalizacion de la tabla certificaciones
ALTER TABLE certificaciones
DROP COLUMN IF EXISTS firma_digital,
DROP COLUMN IF NOT EXISTS fecha_finalizacion;

-- Crear/Modificar tablas
CREATE TABLE IF NOT EXISTS usuarios (
    id serial PRIMARY KEY,
    nombre character varying(100),
    apellido character varying(100),
    correo character varying(100) UNIQUE,
    password text,
    cedula character varying(100) UNIQUE,
    id_rol integer,
    token character varying(255),
    confirmado boolean,
    firma_digital character varying(255) -- Ruta a la imagen de firma digital
);

CREATE TABLE IF NOT EXISTS cursos (
    id_curso serial PRIMARY KEY,
    promotor character varying(255),
    nombre_curso character varying(255),
    descripcion text,
    tiempo_asignado integer,
    inicio_mes date,
    tipo_curso character varying(255),
    autorizacion character varying(255),
    limite_inscripciones integer,
    estado boolean,
    dias_clase text[],
    horario_inicio time without time zone,
    horario_fin time without time zone,
    nivel_curso character varying(255),
    costo numeric(10,2),
    conocimientos_previos text,
    requerimientos_implemento text,
    desempeno_al_concluir text,
    horas_cronologicas integer, -- Duración en horas del curso
    firma_digital boolean DEFAULT false, -- Indicador de firma digital en curso
    fecha_finalizacion timestamp without time zone -- Fecha de finalización del curso
);

CREATE TABLE IF NOT EXISTS certificaciones (
    id_certificacion serial PRIMARY KEY,
    id_usuario integer,
    curso_id integer,
    valor_unico character varying UNIQUE,
    completado boolean DEFAULT false,
    nota integer,
    fecha_inscripcion timestamp without time zone,
    pago boolean,
    tomo integer,
    folio integer
);

CREATE TABLE IF NOT EXISTS buzon_sugerencias (
    id serial PRIMARY KEY,
    nombre character varying(100),
    apellido character varying(100),
    correo character varying(100),
    cedula character varying(100),
    sugerencia text,
    fecha_envio timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    id_usuario integer,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id)
);

CREATE TABLE IF NOT EXISTS cargos (
    id_cargo serial PRIMARY KEY,
    nombre_cargo character varying(100) NOT NULL,
    nombre character varying(100),
    apellido character varying(100),
    titulo character varying(50),
    firma_digital character varying(255),
    id_usuario integer,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id)
);

-- Modificar tabla 'usuarios' para agregar nuevos campos
ALTER TABLE usuarios 
ADD COLUMN IF NOT EXISTS titulo character varying(50),
ADD COLUMN IF NOT EXISTS cargo character varying(100);

-- Otorgar permisos sobre el esquema
GRANT ALL ON SCHEMA cursos TO uptaivir_certificacion2;

-- Otorgar permisos sobre las tablas existentes y nuevas
GRANT ALL ON ALL TABLES IN SCHEMA cursos TO uptaivir_certificacion2;

-- Otorgar permisos sobre las secuencias
GRANT ALL ON ALL SEQUENCES IN SCHEMA cursos TO uptaivir_certificacion2;

-- Otorgar permisos sobre las funciones
GRANT ALL ON ALL FUNCTIONS IN SCHEMA cursos TO uptaivir_certificacion2;

-- Otorgar permisos sobre los triggers
DO $$
DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT event_object_table FROM information_schema.triggers WHERE trigger_schema = 'cursos') LOOP
        EXECUTE 'GRANT ALL ON TABLE cursos.' || r.event_object_table || ' TO uptaivir_certificacion2';
    END LOOP;
END $$;

--------------------------------------------------------------------------------------------------------------

CREATE TABLE cursos.posiciones_firma (
    id_posicion SERIAL PRIMARY KEY,
    codigo_posicion VARCHAR(25) UNIQUE NOT NULL, -- Ej: "P1_INF_IZQ", "P1_INF_DER", etc.
    descripcion_posicion VARCHAR(100) NOT NULL,  -- Ej: "Página 1, Inferior Izquierda"
    pagina SMALLINT NOT NULL                     -- Ej: 1 o 2
);

COMMENT ON TABLE cursos.posiciones_firma IS 'Define las posiciones predeterminadas donde pueden ir las firmas en los certificados.';
COMMENT ON COLUMN cursos.posiciones_firma.codigo_posicion IS 'Código único para la posición, usado internamente por la aplicación.';
COMMENT ON COLUMN cursos.posiciones_firma.descripcion_posicion IS 'Descripción legible para el administrador.';
COMMENT ON COLUMN cursos.posiciones_firma.pagina IS 'Número de página donde se ubica esta posición de firma.';

-- Insertar las 5 posiciones definidas:
INSERT INTO cursos.posiciones_firma (codigo_posicion, descripcion_posicion, pagina) VALUES
('P1_INF_IZQ', 'Página 1, Inferior Izquierda', 1),
('P1_INF_DER', 'Página 1, Inferior Derecha', 1),
('P1_INF_CEN', 'Página 1, Inferior Centro', 1),
('P2_INF_IZQ', 'Página 2, Inferior Izquierda', 2),
('P2_INF_DER', 'Página 2, Inferior Derecha', 2);


CREATE TABLE cursos.cursos_config_firmas (
    id_config SERIAL PRIMARY KEY,
    id_curso INTEGER NOT NULL,
    id_posicion INTEGER NOT NULL,
    id_cargo_firmante INTEGER NULL, -- Puede ser NULL si firma el promotor
    usar_promotor_curso BOOLEAN NOT NULL DEFAULT FALSE,

    CONSTRAINT fk_curso
        FOREIGN KEY(id_curso) 
        REFERENCES cursos.cursos(id_curso)
        ON DELETE CASCADE, -- Si se borra un curso, se borran sus configs de firma
    CONSTRAINT fk_posicion
        FOREIGN KEY(id_posicion)
        REFERENCES cursos.posiciones_firma(id_posicion)
        ON DELETE RESTRICT, -- No permitir borrar una posición si está en uso
    CONSTRAINT fk_cargo_firmante
        FOREIGN KEY(id_cargo_firmante)
        REFERENCES cursos.cargos(id_cargo)
        ON DELETE SET NULL, -- Si se borra un cargo, esta referencia se vuelve NULL (la firma desaparecería del certificado)

    CONSTRAINT chk_firmante_exclusivo
        CHECK (
            (id_cargo_firmante IS NOT NULL AND usar_promotor_curso = FALSE) OR -- Firma alguien de cargos
            (id_cargo_firmante IS NULL AND usar_promotor_curso = TRUE) OR      -- Firma el promotor
            (id_cargo_firmante IS NULL AND usar_promotor_curso = FALSE)        -- Nadie firma (slot vacío, aunque podrías optar por no insertar la fila)
        ),
    CONSTRAINT unq_curso_posicion UNIQUE (id_curso, id_posicion) -- Solo un firmante por posición en un curso
);

COMMENT ON TABLE cursos.cursos_config_firmas IS 'Configuración de qué firmantes aparecen en qué posiciones para cada curso.';
COMMENT ON COLUMN cursos.cursos_config_firmas.id_cargo_firmante IS 'Referencia a la tabla cargos si el firmante es una autoridad oficial.';
COMMENT ON COLUMN cursos.cursos_config_firmas.usar_promotor_curso IS 'TRUE si el promotor del curso firma en esta posición.';


CREATE TABLE cursos.config_sistema (
    clave_config VARCHAR(100) PRIMARY KEY,
    valor_config VARCHAR(255) NOT NULL,
    descripcion_config TEXT NULL,
    fecha_modificacion TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE cursos.config_sistema IS 'Almacena configuraciones globales del sistema.';
COMMENT ON COLUMN cursos.config_sistema.clave_config IS 'Clave única para la configuración (ej: ID_CARGO_COORD_FP_POR_DEFECTO).';
COMMENT ON COLUMN cursos.config_sistema.valor_config IS 'Valor de la configuración.';

-- Ejemplo de cómo insertar el ID del coordinador por defecto (supongamos que el id_cargo de Yoselin es 5)
-- Deberás hacer esto una vez que sepas el id_cargo correcto.
-- INSERT INTO cursos.config_sistema (clave_config, valor_config, descripcion_config) VALUES
-- ('ID_CARGO_COORD_FP_POR_DEFECTO', '5', 'ID del cargo correspondiente al Coordinador de Formación Permanente por defecto para plantillas.');


ALTER TABLE cursos.cargos
ADD COLUMN activo BOOLEAN NOT NULL DEFAULT TRUE;

COMMENT ON COLUMN cursos.cargos.activo IS 'Indica si la persona en este cargo está actualmente activa para firmar o ser seleccionada.';


-- Otorgar permisos sobre el esquema
GRANT ALL ON SCHEMA cursos TO uptaivir_certificacion2;

-- Otorgar permisos sobre las tablas existentes y nuevas
GRANT ALL ON ALL TABLES IN SCHEMA cursos TO uptaivir_certificacion2;

-- Otorgar permisos sobre las secuencias
GRANT ALL ON ALL SEQUENCES IN SCHEMA cursos TO uptaivir_certificacion2;

-- Otorgar permisos sobre las funciones
GRANT ALL ON ALL FUNCTIONS IN SCHEMA cursos TO uptaivir_certificacion2;